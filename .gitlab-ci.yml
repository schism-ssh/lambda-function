# This file is a template, and might need editing before it works on your project.
default:
  image: golang:1.14.1-buster
  tags:
    - shared-exec-docker

stages:
  - test
  - build
  - deploy
.global-vars:
  # There's several ways to do this and I like this one
  variables:
    # Please edit to your GitLab project
    REPO_NAME: $CI_SERVER_HOST/$CI_PROJECT_PATH
    GOOS: linux
    GOARCH: amd64
    SCHISM_BIN: schism-lambda-${CI_COMMIT_REF}

.go-jobs:
  # The problem is that to be able to use go get, one needs to put
  # the repository in the $GOPATH. So for example if your gitlab domain
  # is gitlab.com, and that your repository is namespace/project, and
  # the default GOPATH being /go, then you'd need to have your
  # repository in /go/src/gitlab.com/namespace/project
  # Thus, making a symbolic link corrects this.
  before_script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
    - go get

format:
  stage: test
  extends:
    - .global-vars
    - .go-jobs
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  extends:
    - .global-vars
    - .go-jobs
  script:
    - go build -ldflags "-extldflags '-static'" -o "${CI_PROJECT_DIR}/${SCHISM_BIN}"
  artifacts:
    paths:
      - ${SCHISM_BIN}
  dependencies:
    - format

release:
  stage: deploy
  extends:
    - .global-vars
  variables:
    GIT_STRATEGY: none
  image: alpine:3.11.3
  before_script:
    - apk add -U zip python3
    - pip3 install awscli
  script:
    - zip "${SCHISM_BIN}".zip "${SCHISM_BIN}"
    - echo aws s3 sync . s3://$RELEASE_PATH/${SCHISM_BIN}.zip --exclude "*" --include "${SCHISM_BIN}.zip"
  dependencies:
    - compile
  rules:
    - if: $CI_COMMIT_REF_PROTECTED
      when: always
    - when: never
